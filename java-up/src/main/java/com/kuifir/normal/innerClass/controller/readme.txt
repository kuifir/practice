一个控制框架，一个内部类应用的示例

    控制框架是一种特殊的应用框架，主要是为了满足对事件做出响应这样的需求。主要对事件做出响应的系
统叫事件驱动系统（event-driven system）。应用程序编程中的一个常见问题就是图形用户界面（GUI）,
它几乎完全是事件驱动的。
    为了了解内部类是如何简化控制框架的创建和使用的，考虑这样一个框架，其工作就是当事件"就绪"(ready)
时执行相应的事件。尽管"就绪"可以指代任何事物，但在这里他就是基于时间的。接下来要演示的是一个控制框架，
对于所控制的事物，该框架中并没有包含与之相关的特定信息。这是通过继承来实现的，相关信息再重写算法的action()
部分时提供。

    Event:用于描述任何控制时间的接口，是一个abstract类，而不是实际的接口。其中包含了部分实现、
    Controller:用于管理和触发事件的真正的控制框架。Event对象被保存在一个List<Event>类型的集合中。

    到目前为止，对一个Event到底是干什么的还是一无所知。这正是这种设计的关键所在，就是它如何"将变化的
事物和保持不变的事物分离开来"。或者说，"变化向量"(vector of change)就是各种Event对象的不同动作，
我们通过创建不同的Event子类来表达不同的动作。
    这就是内部类的用武之地了。内部类允许以下事项。
    1. 控制框架的整个实现是在一个单独的类内创建的，从而封装了关于该实现的所有独特之处。内部类用来表达
解决问题所必需的多种不同的action()。
    2. 内部类可以避免这种实现变得过于笨拙，因为我们很容易访问外围类的任何成员。如果没有这种能力，代码
可能会不好用，以至于你不得不去寻找替代方案。

    考虑这个控制框架的一个特定实现，比如控制温室的功能。每个动作都是完全不同的: 控制定光、水、恒温器的开关，
以及响铃和重启系统。控制框架在设计上就能轻松地隔离不同的代码。内部类支持在一个类内实现同一基类Event的多个
派生版本。对于每一类动作，我们可以继承一个新的Event内部类，并在action()的实现中编写控制代码。